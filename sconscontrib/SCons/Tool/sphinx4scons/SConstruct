# -*- mode: python; encoding: utf-8; -*-
#
# Sample SConstruct file equivalent to the make files generated by the
# sphinx-quickstart script.
#
import os

env = Environment()
sphinx = Tool('sphinx4scons')
sphinx(env)


def helptext(builder, text):
    Help(("  %-10s  %s\n") % (builder, text))


makeinfo = env.Builder(action = ['makeinfo --no-split -o $TARGET $SOURCE'],
                       suffix = '.info',
                       src_suffix = '.texi')

env.Append(BUILDERS = {'MakeInfo': makeinfo})

builddir = '_build'
srcdir = '.'

doctrees = env.Dir(os.path.join(builddir, 'doctrees'))
env['SPHINXDOCTREE'] = str(doctrees.path)
env.Clean('all', doctrees)

Help("\nUsage: 'scons [<target>]' where <target> is one of the following.\n"+
     "If target is omitted all targets will be built.\n\n")

helptext("changes", "make an overview of all changed/added/deprecated items")
changes = env.Sphinx(os.path.join(builddir, 'changes'), srcdir, builder='changes')
env.Alias("changes", changes)


helptext("devhelp", "make HTML files and a Devhelp project")
devhelp = env.Sphinx(os.path.join(builddir, 'devhelp'), srcdir, builder='devhelp')
env.Alias("devhelp", devhelp)


helptext("dirhtml", "make HTML files named index.html in directories")
dirhtml = env.Sphinx(os.path.join(builddir, 'dirhtml'), srcdir, builder='dirhtml')
env.Alias("dirhtml", dirhtml)


helptext("doctest", "run all doctests embedded in the documentation (if enabled)")
doctest = env.Sphinx(os.path.join(builddir, 'doctest'), srcdir, builder='doctest')
env.Alias("doctest", doctest)


helptext("epub", "make an epub")
epub = env.Sphinx(os.path.join(builddir, 'epub'), srcdir, builder='epub')
env.Alias("epub", epub)


helptext("gettext", "make PO message catalogs")
# NOTE: The gettext builder can not use the same doctrees as other builders.
gettext = env.Sphinx(os.path.join(builddir, 'locale'), srcdir, builder='gettext', doctree='')
env.Alias("gettext", gettext)


helptext("html", "make standalone HTML files")
html = env.Sphinx(os.path.join(builddir, 'html'), srcdir, builder='html')
env.Alias("html", html)


helptext("htmlhelp", "make HTML files and a HTML help project")
htmlhelp = env.Sphinx(os.path.join(builddir, 'htmlhelp'), srcdir, builder='htmlhelp')
env.Alias("htmlhelp", htmlhelp)


helptext("json", "make JSON files")
json = env.Sphinx(os.path.join(builddir, 'json'), srcdir, builder='json')
env.Alias("json", json)


helptext("latex", "make LaTeX files, you can set PAPER=a4 or PAPER=letter")
latex = env.Sphinx(os.path.join(builddir, 'latex'), srcdir, builder='latex')
env.Alias("latex", latex)


helptext("linkcheck", "check all external links for integrity")
linkcheck = env.Sphinx(os.path.join(builddir, 'linkcheck'), srcdir, builder='linkcheck')
env.Alias("linkcheck", linkcheck)


helptext("man", "make manual pages")
man = env.Sphinx(os.path.join(builddir, 'man'), srcdir, builder='man')
env.Alias("man", man)


helptext("pickle", "make pickle files")
pickle = env.Sphinx(os.path.join(builddir, 'pickle'), srcdir, builder='pickle')
env.Alias("pickle", pickle)


helptext("pdf", "make LaTeX files and run them through pdflatex")
pdf = env.PDF(latex)
for s in pdf:
    p = env.Command(os.path.join(builddir, 'pdf', '${SOURCE.file}'), s, Move("$TARGET", "$SOURCE"))
    Clean(p, os.path.join(builddir, "pdf"))
    pdf = env.Alias('pdf', p)


helptext("qthelp", "make HTML files and a qthelp project")
qthelp = env.Sphinx(os.path.join(builddir, 'qthelp'), srcdir, builder='qthelp')
env.Alias("qthelp", qthelp)


helptext("singlehtml", "make a single large HTML file")
singlehtml = env.Sphinx(os.path.join(builddir, 'singlehtml'), srcdir, builder='singlehtml')
env.Alias("singlehtml", singlehtml)


helptext("texinfo", "make Texinfo files")
texinfo = env.Sphinx(os.path.join(builddir, 'texinfo'), srcdir, builder='texinfo')
env.Alias("texinfo", texinfo)


helptext("info", "make Texinfo files and run them through makeinfo")
info = env.MakeInfo(texinfo)
for s in info:
    i = env.Command(os.path.join(builddir, 'info', '${SOURCE.file}'), s, Move("$TARGET", "$SOURCE"))
    Clean(i, os.path.join(builddir, "info"))
    info = env.Alias('info', i)


helptext("text", "make text files")
text = env.Sphinx(os.path.join(builddir, 'text'), srcdir, builder='text')
env.Alias("text", text)
